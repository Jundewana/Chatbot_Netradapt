export declare enum EvalType {
    ET_COST = 0,
    ET_FITNESS = 1
}
export declare type Config = {
    dnaCodes: Array<any>;
    evalType: EvalType;
    evalFn: Function;
    mutate: Function;
    mate: Function;
};
export declare type Gene = {
    code: Array<any>;
    score: number;
    fitness: number;
    cost: number;
};
export declare type Population = {
    elements: Array<Gene>;
    generation: number;
};
/** Generate a new random population
 *  Used for initialization
 */
export declare let randomPopulation: (config: Config, len: number, popSize: number) => Population;
/** Generate a random gene sequence */
export declare let randomGene: (config: Config, len: number) => Gene;
/** Calculate normalized (0-1) score from cost range of population */
export declare let score: (config: Config, population: Population) => Population;
/** Evolve population to its next generation */
export declare let evolve: (config: Config, population: Population, mutationRate: number) => Population;
